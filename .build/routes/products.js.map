{
  "version": 3,
  "sources": ["../../routes/products.ts"],
  "sourcesContent": ["import Router, { RouterContext } from \"koa-router\";\nimport bodyParser from \"koa-bodyparser\";\nimport * as model from \"../models/products\";\nimport { basicAuth } from \"../controllers/auth\";\nimport { nutriPoint } from '../tools/nutri-score';\n\n//set the base endpoint\nconst router = new Router({ prefix: '/api/v1/products' });\n\n///////////////////////////////////////////\n//async functions\n\n/*\n[GET] Get Top 5 products\n- Endpoint: /recommend\n*/\nconst topProducts = async(ctx: RouterContext, next: any)=> {\n  const top = await model.getTopProducts();\n  if (top.length) {\n    // If it exists then return the cat as JSON\n    ctx.body = top;\n  } else {\n    // Otherwise return a 404 Not Found status code\n    ctx.status = 404\n  }\n  await next();\n};\n\n/*\n[POST] Check nutri-score for a product\n- Endpoint: /products/check\n*/\nconst checkNutrition = async (ctx: RouterContext, next: any) => {\n  const body: any = ctx.request.body;\n\n  const foodtype = body.foodType;\n  const energy = parseFloat(body.energy.trim());\n  const sugars = parseFloat(body.sugars.trim())*1000;\n  const satuFat = parseFloat(body.satuFat.trim())*1000;\n  const sodium = parseFloat(body.sodium.trim());\n  const fruitVeget = parseFloat(body.fruitVeget.trim());\n  const fibre = parseFloat(body.fibre.trim())*1000;\n  const protein = parseFloat(body.protein.trim())*1000;\n\n  console.log(\"foodtype: \" + foodtype)\n  console.log(\"energy: \" + energy)\n  console.log(\"sugars: \" + sugars)\n  console.log(\"saturatedFat: \" + satuFat)\n  console.log(\"sodium: \" + sodium)\n  console.log(\"fruitVeget: \" + fruitVeget)\n  console.log(\"fibre: \" + fibre)\n  console.log(\"protein: \" + protein)\n\n  const grading_result: any = nutriPoint(foodtype,energy,sugars,satuFat,sodium,fruitVeget,fibre,protein)\n\n  const p_Score = parseFloat(grading_result[0])\n  const p_Grade = grading_result[1]\n  const output = [{\"score\": p_Score.toString(), \"grade\": p_Grade}]\n\n  console.log(output)\n\n  ctx.status = 201;\n  ctx.body = output\n  await next();\n};\n\n\n/*\n[POST] Share the nutri-score result for a product\n- Endpoint: /products/share\n*/\nconst shareProduct = async (ctx: RouterContext, next: any) => {\n  \n  const body: any = ctx.request.body;\n\n  const tempBody = {\n    \"platformId\" : body.platformId,\n    \"productBarcode\" : body.productBarcode,\n    \"productName\" : body.productName,\n    \"manufacturer\" : body.manufacturer,\n    \"score\" : parseFloat(body.score.trim()),\n    \"grade\" : body.grade,\n    \"foodType\" : body.foodType,\n    \"energy\" : parseFloat(body.energy.trim()),\n    \"sugars\" : parseFloat(body.sugars.trim()),\n    \"satuFat\" : parseFloat(body.satuFat.trim()),\n    \"sodium\" : parseFloat(body.sodium.trim()),\n    \"fruitVeget\" : parseFloat(body.fruitVeget.trim()),\n    \"fibre\" : parseFloat(body.fibre.trim()),\n    \"protein\" : parseFloat(body.protein.trim())\n  }\n\n  console.log(tempBody)\n\n  const result = await model.add(tempBody);\n  //if the product is added to DB -> 201, else -> 500\n  if (result.status == 201) {\n    console.log(\"Product shared successfully.\")\n    ctx.status = 201;\n  } else {\n    console.log(\"Product shared failed.\")\n    ctx.status = 500;\n  }\n  await next();\n};\n\n\n//define different endpoints\nrouter.get('/recommend', topProducts);\nrouter.post('/check', bodyParser(), checkNutrition);\nrouter.post('/share', bodyParser(), shareProduct);\n\nexport { router };"],
  "mappings": "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",
  "names": ["Router", "bodyParser"]
}
